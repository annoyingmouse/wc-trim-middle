!function(){"use strict";class t extends HTMLSpanElement{#t=null;#e=null;static get observedAttributes(){return["width","replacement"]}connectedCallback(){this.#t=this.textContent,this.#t.length>this.width&&(this.textContent=this.trimMiddle(this.#t,this.width,this.replacement),this.setAttribute("title",this.#t)),this.#e=new MutationObserver((t=>{t.forEach((t=>{"childList"===t.type&&this.textContent!==this.#t&&this.textContent!==this.trimMiddle(this.#t,this.width,this.replacement)&&(this.#t=this.textContent,this.#t.length>this.width?(this.textContent=this.trimMiddle(this.#t,this.width,this.replacement),this.setAttribute("title",this.#t)):(this.textContent=this.#t,this.removeAttribute("title")))}))})),this.#e.observe(this,{attributes:!1,childList:!0,characterData:!1})}disconnectedCallback(){this.#e.disconnect()}attributeChangedCallback(t,e,i){e!==i&&("width"===t&&this.#t&&(this.#t.length>i?(this.textContent=this.trimMiddle(this.#t,this.width,this.replacement),this.setAttribute("title",this.#t)):(this.textContent=this.#t,this.removeAttribute("title"))),"replacement"===t&&this.#t&&(this.#t.length>this.width?(this.textContent=this.trimMiddle(this.#t,this.width,this.replacement),this.setAttribute("title",this.#t)):(this.textContent=this.#t,this.removeAttribute("title"))))}trimMiddle=(t,e=16,i="…")=>{if("string"!=typeof t)throw new TypeError("The first argument must be a string.");if("number"!=typeof e)throw new TypeError("The length argument must be a number.");if("string"!=typeof i)throw new TypeError("The replaceString argument must be a string.");if(e<=i.length)throw new RangeError("The length argument must be greater than the replaceString length.");if(t.length<=e)return t;let r="";const n=(e-i.length)/2,s=Math.ceil(n),h=[];let l=0;for(const{segment:e}of(new Intl.Segmenter).segment(t))l<s?r+=e:h.push(e),l++;const a=Math.floor(n);return r+i+(a>0?h.slice(-a).join(""):"")};get width(){return this.hasAttribute("width")&&!Number.isNaN(Number(this.getAttribute("width")))?Number(this.getAttribute("width")):16}get replacement(){return this.hasAttribute("replacement")?this.getAttribute("replacement"):"…"}}customElements.define("wc-trim-middle",t,{extends:"span"})}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
